js fundamental variable assignment

let a ;
console.log("before assignment : "+a)
a=10
console.log("after assignment : "+a)

if we log before assigning any value we get undefined after assigning we get the assigned value.
we get same corresponding output for var but when we use const an error is generated 'Missing initializer in const declaration'.



For any numeric value wether it be integer or decimal we get the datatype 'number' and respectively for string we get 'string'.
For array and null typeof returns object and for NaN it gives number.




Other way to check whether its an array or not is using Array.isArray() method.
It returns true if its an array otherwise false.

Other ways to check whether its a NaN or not is using Number.isNaN() method.
It returns true if its a NaN otherwise false.
one more way is that NaN has a very peculiar property i.e. the expression NaN === NaN yields false. And itâ€™s only in the case of NaN that its false.
Suppose 
let a = NaN;
let b = 10;
console.log(a===a) // the output will be false 
console.log(b===b) // the output will be true
So if we do NaN!==NaN then we will get true as output and we can determine if its a NaN or not 
console.log(a!==a) // output true
console.log(b!==b) // output false



If we declare a variable as const then its value cannot be changed and the value has to be assigned at the time of declaration
whereas if a variable is declared as let the its value can be changed or modified and neither do it required to be changed at the time of declaration.

In array when declared whether as let or const no prominent changes can be observed although i expected when declared as const the values might not get changed or show an error but nothing like that happens.
The major difference when declared as let and const is that when declared as let the value can be reassigned but in case of const we get an error 'Assignment to constant variable' at runtime. 

