typeof operator

let v1=10; 
console.log(typeof(v1))
let v2='10'; 
console.log(typeof(v2))
let v3=[1,2,3]; 
console.log(typeof(v3))
let v4={}; 
console.log(typeof(v4))
let v5=false; 
console.log(typeof(v5))
let v6=NaN; 
console.log(typeof(v6))
let v7=null; 
console.log(typeof(v7))
let v8; 
console.log(typeof(v8))

output :
 number
 string
 object
 object
 boolean
 number
 object
 undefined

Other ways to find if a variable is an array or NaN besides typeof
Other way to check whether its an array or not is using Array.isArray() method.
It returns true if its an array otherwise false.

Other ways to check whether its a NaN or not is using Number.isNaN() method.
It returns true if its a NaN otherwise false.
one more way is that NaN has a very peculiar property i.e. the expression NaN === NaN yields false. And itâ€™s only in the case of NaN that its false.
Suppose 
let a = NaN;
let b = 10;
console.log(a===a) // the output will be false 
console.log(b===b) // the output will be true
So if we do NaN!==NaN then we will get true as output and we can determine if its a NaN or not 
console.log(a!==a) // output true
console.log(b!==b) // output false



let a = [1,2,3]
let b = NaN
//other ways to check for array
console.log(Array.isArray(a))

//other ways to check for NaN
console.log(isNaN(b))
console.log(Number.isNaN(b))
console.log(b!==b)

output :
 true
 true
 true
 true


// modyfying and deletion operation on array

let a1 = [1,2,3,4,5]
const a2 = [1,2,3,4,5]
//modifying array
a1[1]=7;
a2[1]=7;
console.log("let declared array after modification : "+a1);
console.log("const declared array after modification : "+a2);
//deleting from array
console.log("deletion by pop");
a1.pop();
a2.pop();
console.log("let declared array after deletion : "+a1);
console.log("const declared array after deletion : "+a2);

console.log("deletion by shift")
a1.shift();
a2.shift();
console.log("let declared array after deletion : "+a1);
console.log("const declared array after deletion : "+a2);

console.log("deletion by splice")
a1.splice(1,1);
a2.splice(1,1);
console.log("let declared array after deletion : "+a1);
console.log("const declared array after deletion : "+a2);

output :

 let declared array after modification : 1,7,3,4,5
 const declared array after modification : 1,7,3,4,5
 deletion by pop
 let declared array after deletion : 1,7,3,4
 const declared array after deletion : 1,7,3,4
 deletion by shift
 let declared array after deletion : 7,3,4
 const declared array after deletion : 7,3,4
 deletion by splice
 let declared array after deletion : 7,4
 const declared array after deletion : 7,4

//modyfying and deletion operation on object

let obj1 = { v1 : 10 , v2 : 99 };
const obj2 = { v1 : 10 , v2 : 99 };

//modifying object
obj1.v2=10;
obj2.v2=10;
console.log(obj1);
console.log(obj2);

//deleting from object

delete obj1.v1;
delete obj2.v1;
console.log(obj1);
console.log(obj2);

output :
{v1: 10, v2: 10}
{v1: 10, v2: 10}
{v2: 10}
{v2: 10}

If we declare a variable as const then its value cannot be changed and the value has to be assigned at the time of declaration
whereas if a variable is declared as let the its value can be changed or modified and neither do it required to be changed at the time of declaration.

In array when declared whether as let or const no prominent changes can be observed although i expected when declared as const the values might not get changed or show an error but nothing like that happens.
The major difference when declared as let vs const is that when declared as let the value can be reassigned but in case of const we get an error 'Assignment to constant variable' at runtime. 
